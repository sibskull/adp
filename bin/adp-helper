#!/usr/bin/python3                                                                                                         
  
# Script for show ALT Domain Policies templates
# Copyright (C) 2019 Andrey Cherepanov <cas@altlinux.org>

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

import sys
import os
import glob
import xml.etree.ElementTree as ET
import json
import base64

TEMPLATE_PATH = "/usr/libexec/adp"

# Required mapping
nsmap = {"xml": "http://www.w3.org/XML/1998/namespace"}

def get_list():
    """Get templates list"""
    files = [ os.path.basename( os.path.splitext( f )[0] ) for f in glob.glob( TEMPLATE_PATH + "/*.xml", recursive=False ) ]
    return files

l = get_list()
l.sort()

if len( sys.argv ) < 4:
    print( "Usage: adp-helper <cmd> <policy> <class>" )
    sys.exit( 1 )

cmd = sys.argv[1]
policy = sys.argv[2]
item_class = sys.argv[3]

# Process passed language
lang = os.environ['in_language'] if 'in_language' in os.environ else ''
lang = lang.split( ';' )[0]   # Preferred locale as ru_RU
lang = lang.split( '_' )[0]   # Language without region as 'ru'

def adp_list( policy, item_class ):
    d = list()
    for i in l:
        # Iterate each template
        try:
            t = ET.parse( os.path.join( TEMPLATE_PATH, i + ".xml" ) )
        except:
            continue

        # Check class
        appropriated_class = False
        for k in t.findall( "class" ):
            # Check both for machine and user
            if item_class == k.text:
                appropriated_class = True
            if item_class == 'machine' and k.text == 'su':
                appropriated_class = True

        if not appropriated_class:
            continue

        id = t.findtext( "id" )
        tag = 'name'
        summary_en = t.findtext( tag, namespaces=nsmap )
        if lang:
            tag = "%s[@xml:lang=\"%s\"]" % ( tag, lang )
        summary = t.findtext( tag, namespaces=nsmap )

        # Fallback to English if localized item is empty
        if not summary:
            summary = summary_en

        # TODO
        is_active = "#t"

        params = t.findall( "parameters/param", namespaces=nsmap  )
        item = { 'id': id, 'summary': summary, 'params': list() }
        for p in params:

            # Fill name, type and default
            if 'name' in p.attrib:
                name = p.attrib['name']
            else:
                name = p.text
            if 'type' in p.attrib:
                type = p.attrib['type']
            else:
                type = p.text
            default = p.attrib['default'] if 'default' in p.attrib else ''

            # Localized label
            label = p.findtext( "label[@xml:lang=\"%s\"]" % ( lang ), namespaces=nsmap )
            if not label:
                label = name

            # Add item
            item['params'].append( { 'name': name, 'type': type, 'label': label, 'default': default, 'value': '' } )

        # Add item to policy list
        d.append( item)

        # Serialize params
        params = json.dumps( item['params'], indent=2 )
        params = base64.standard_b64encode( params.encode() ).decode()

        print( "%s|%s|%s|%s" % ( is_active, id, summary, params ) )
    return d

#j = json.dumps( d, indent=2 )
#print( j )

adp_list( policy, item_class )
